[package]
name = "wasm-rust-tris"
version = "0.1.0"
authors = ["dave <ddalcino@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2"
js-sys = "0.3.22"
rand = { version = "0.6.5", features = ["wasm-bindgen"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dependencies.web-sys]
version = "0.3"
features = [
  "console",
  "CanvasRenderingContext2d",
  'Document',
  'Element',
  'HtmlCanvasElement',
  'HtmlElement',
  'HtmlSpanElement',
  'Window',
  'Node',

  # pub fn begin_path(&self)
  # pub fn move_to(&self, x: f64, y: f64)
  # pub fn line_to(&self, x: f64, y: f64)
  # pub fn stroke(&self)
#  "JsValue",    # pub fn set_stroke_style(&self, stroke_style: &JsValue)

]

[dev-dependencies]
wasm-bindgen-test = "0.2"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
